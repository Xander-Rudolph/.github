name: LLM PR Review

on:
  pull_request:
      types: [opened, synchronize]
  workflow_call:
    inputs:
      model:
        description: 'Override model name'
        required: false
        type: string
        default: llama3.1 # https://github.com/ollama/ollama?tab=readme-ov-file#model-library
      prompt:
        description: 'Prompt to prefix the PR content'
        required: false
        type: string
        default: "Review this pull request and provide suggestions for code to fix or alternative methods"
      review-timeout:
        description: 'Length of time (in minutes) to attempt the PR'
        required: false
        type: number
        default: 30
        
jobs:
  review-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    services:
      ollama:
        image: ollama/ollama:latest
        # volumes:
        #   - ./llama_model:/app/model
        ports:
          - 11434:11434
    steps:
      - name: Get PR details
        shell: pwsh
        id: details
        run: |
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $owner = "${{ github.repository_owner }}"
          $repo = "${{ github.event.repository.name }}"
          $pr_number = "${{ github.event.number }}"
    
          $headers = @{
              Authorization = "token $token"
              Accept        = "application/vnd.github.v3+json"
          }
    
          # Get PR details
          $pr_url = "https://api.github.com/repos/$owner/$repo/pulls/$pr_number"
          $pr_response = Invoke-RestMethod -Uri $pr_url -Headers $headers
          
          # Get PR files
          $files_url = "$($pr_response.url)/files"
          $files_response = Invoke-RestMethod -Uri $files_url -Headers $headers -verbose
    
          $content = "PR Details:`n"
          $content += "Title: $($pr_response.title)`n"
          $content += "Author: $($pr_response.user.login)`n"
          $content += "Description: $($pr_response.body)`n"
          $content += "`nFiles:`n"
          foreach ($file in $files_response) {
              $content += "Filename: $($file.filename)`n"
              $content += "Changes: $($file.changes)`n"
              $content += "Patch:`n$($file.patch)`n"
              $content += "`n"
          }
    
          # using output vars isn't working... write files instead
          $content | convertto-json | Out-File delta.txt

      - name: Send PR to ollama - ${{ inputs.model || 'llama3.1' }}
        shell: pwsh
        timeout-minutes: ${{ inputs.review-timeout }}
        id: review
        run: |
          $Uri = "http://localhost:11434"
          # this is needed for PRs since intput can't be determined
          if (-not [string]::IsNullOrEmpty("${{ inputs.model }}")) {$model = 'llama3.1'} 
          $deltas = Get-Content delta.txt
          $prompt = "${{ inputs.prompt }}:`n$deltas"
          $ErrorActionPreference = 'continue'
          $VerbosePreference = 'continue'

          Write-Verbose "Test if ollama is responding..."
          Try {
              $testService = invoke-restmethod -uri $Uri -Method get
          }
          catch {
              Write-Error "Ollama didn't respond...`n$($_.exception)"
              exit
          }
          Write-Verbose "Response:`n$testService"

          # format URI for API calls
          $baseUri = "$Uri/api"

          # Declare default splat
          $splat = @{
              Headers = @{
                  "Content-Type" = "application/json"
              }
              Method = "Post"
          }

          $splat.body = @{
              name = $model
          } | ConvertTo-Json
          Try {
              $pullModel = Invoke-WebRequest @splat -Uri "$baseUri/pull"
          }
          catch {
              Write-Error "Failed to pull model...`n$($_.exception)"
              exit
          }

          # Use Invoke-WebRequest to send the question
          $body = @{
              prompt = $prompt
              stream = $false
              model = $model
          }
          $splat.Body = $body | ConvertTo-Json
          $response = Invoke-WebRequest @splat -Uri "$baseUri/generate"

          $comment = ($response.content | ConvertFrom-Json).response
          $comment | convertto-json | Out-File review.txt
                
      - name: Comment on PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
      
            // Define the file path
            const filePath = 'review.txt';
      
            // Read the content from the file
            let output;
            try {
              output = fs.readFileSync(filePath, 'utf8');
            } catch (error) {
              core.setFailed(`Failed to read the comment file: ${error.message}`);
              return;
            }
      
            // Replace newline characters with actual newlines
            output = output.replace(/\\n/g, '\n');
      
            // Fetch existing comments
            const response = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              headers: {
                accept: 'application/vnd.github.v3+json'
              }
            });
      
            // Ensure data is defined
            const comments = response.data || [];
            const existingComment = comments.find(comment => comment.body.startsWith('<!-- pr-review -->'));
      
            // Format the output
            const formattedOutput = `
            #### Review Results üìù
            <details><summary>Details</summary>
            
            ${output}
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*
            `;
      
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `<!-- pr-review -->\n${formattedOutput}`
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `<!-- pr-review -->\n${formattedOutput}`
              });
            }
